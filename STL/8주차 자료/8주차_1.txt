
#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ //
// deque
// vector 와는 반대로 contiguious 하게 메모리에 저장되어있지 않지만 
// 인덱싱이 되어있다. 
// 
// ============================================ //

#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

int main()
{
	std::ifstream InFile{ "list.txt" };
	list<String> Contatiner{ /*파일 시작*/ std::istream_iterator<String>{InFile}, { } }; // insert 하면 랜덤하게 막 집어넣는다 

	// EOF 가 나온다면 false 가 리턴된다. 

	// 집에서 해보기 
	// [ 문제 ] - 글자 수가 5인 단어를 "다섯글자.txt" 파일에 저장하라 
	// Copy 알고리즘 ?  
	// 스플라이싱 ?  
	//std::ostream
	//std::copy_if(Contatiner.begin(), Contatiner.end(), std::ostream_iterator <String>("다섯글자.txt",) , /*다섯글자라면*/);

	//std::copy_if(to_vector.begin(), to_vector.end(),
	//	std::ostream_iterator<int>(std::cout, " "),
	//	[](int x) { return x % 2 != 0; });


	std::ofstream out{ "다섯글자.txt" }; // 기존에 있던 모든게 파괴된다.

	/*
	for (String& s : Contatiner) {
		if (s.getSize() == 5)
			out << s << endl;
	}

	*/

	std::copy_if(Contatiner.begin(), Contatiner.end(),
		std::ostream_iterator<String>{ out, "\n"},
		[](const String& s) { return s.getSize() == 5; });



	InFile.close();

	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/list.txt_2읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ //
// deque
// vector 와는 반대로 contiguious 하게 메모리에 저장되어있지 않지만 
// 인덱싱이 되어있다. 
// 
// ============================================ //

#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

int main()
{
	
	list<int> a{ 1,3,4,9,5,7 };
	list<int> b{ 4,10,2,4,4,4,8,6 };

	// 내림차순 정렬 
	a.sort([](int L, int R) { return L > R; });
	b.sort([](int L, int R) { return L > R; });


	// a 와 b를 merge 하라
	a.merge(b); // 두 리스트를 완벽하게 합친다. 

	for (int n : a)
		cout << n << ' ';
	cout << endl;

	for (int n : b)
		cout << n << ' ';
	cout << endl;

	cout << "a 와 b를 Merge" << endl;

	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/list.txt_2읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ //
// deque
// vector 와는 반대로 contiguious 하게 메모리에 저장되어있지 않지만 
// 인덱싱이 되어있다. 
// 
// ============================================ //

#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

int main()
{
	
	list<int> a{ 1,3,4,9,5,7 };
	list<int> b{ 4,10,2,8,6 };

	// 내림차순 정렬 
	a.sort([](int L, int R) { return L > R; });
	b.sort([](int L, int R) { return L > R; });


	// a 와 b를 merge 하라
	a.merge(b); // 두 리스트를 완벽하게 합친다. 

	for (int n : a)
		cout << n << ' ';
	cout << endl;

	for (int n : b)
		cout << n << ' ';
	cout << endl;

	cout << "a 와 b를 Merge" << endl;

	for (int n : a)
		cout << n << ' ';
	cout << endl;
	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/list.txt_2읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ //
// deque
// vector 와는 반대로 contiguious 하게 메모리에 저장되어있지 않지만 
// 인덱싱이 되어있다. 
// 
// ============================================ //

#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

int main()
{
	
	list<int> a{ 1,3,4,9,5,7 };
	list<int> b{ 4,10,2,8,6 };

	// 내림차순 정렬 
	a.sort([](int L, int R) { return L > R; });
	b.sort([](int L, int R) { return L > R; });


	// a 와 b를 merge 하라
	a.merge(b); // 두 리스트를 완벽하게 합친다. 

	for (int n : a)
		cout << n << ' ';
	cout << endl;

	for (int n : b)
		cout << n << ' ';
	cout << endl;

	cout << "a 와 b를 Merge" << endl;

	for (int n : a)
		cout << n << ' ';
	cout << endl;
	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/merge.txt읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ //
// deque
// vector 와는 반대로 contiguious 하게 메모리에 저장되어있지 않지만 
// 인덱싱이 되어있다. 
// 
// ============================================ //

#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

int main()
{
	
	list<int> a{ 1,3,4,9,5,7 };
	list<int> b{ 4,10,2,8,6 };

	// 내림차순 정렬 
	a.sort([](int L, int R) { return L > R; });
	b.sort([](int L, int R) { return L > R; });


	// a 와 b를 merge 하라
	a.merge(b, [](int L, int R) { return L < R; }); // 두 리스트를 완벽하게 합친다. 

	for (int n : a)
		cout << n << ' ';
	cout << endl;

	for (int n : b)
		cout << n << ' ';
	cout << endl;

	cout << "a 와 b를 Merge" << endl;

	for (int n : a)
		cout << n << ' ';
	cout << endl;
	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/merge.txt읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ //
// deque
// vector 와는 반대로 contiguious 하게 메모리에 저장되어있지 않지만 
// 인덱싱이 되어있다. 
// 
// ============================================ //

#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

int main()
{
	
	list<int> a{ 1,3,4,9,5,7 };
	list<int> b{ 4,10,2,8,6 };

	// 내림차순 정렬 
	a.sort([](int L, int R) { return L > R; });
	b.sort([](int L, int R) { return L > R; });


	// a 와 b를 merge 하라
	a.merge(b, [](int L, int R) { return L > R; }); // 두 리스트를 완벽하게 합친다. 

	for (int n : a)
		cout << n << ' ';
	cout << endl;

	for (int n : b)
		cout << n << ' ';
	cout << endl;

	cout << "a 와 b를 Merge" << endl;

	for (int n : a)
		cout << n << ' ';
	cout << endl;
	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/merge.txt읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ // 
// Sequence Container - list - 멤버로 작성된 함수들ㅇ르 활용하라. ( sort, merge )
// ============================================ //

#include <iostream>
#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

int main()
{
	
	list<int> a{ 1,3,4,9,5,7 };
	list<int> b{ 4,10,2,8,6 };

	// 내림차순 정렬 
	a.sort([](int L, int R) { return L > R; });
	b.sort([](int L, int R) { return L > R; });


	// a 와 b를 merge 하라
	a.merge(b, [](int L, int R) { return L > R; }); // 두 리스트를 완벽하게 합친다. 

	for (int n : a)
		cout << n << ' ';
	cout << endl;

	for (int n : b)
		cout << n << ' ';
	cout << endl;

	cout << "a 와 b를 Merge" << endl;

	for (int n : a)
		cout << n << ' ';
	cout << endl;
	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/merge.txt읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ // 
// SPAN
// ============================================ //

#include <iostream>
#include <span>

#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

//void print(int[]);
//void print(int a[])
//{
//	// a 가 몇개인지 알 수 없다. 
//	for (int i = 0; i < 20; ++i)
//		cout << a[i] << endl;
//	cout << endl;
//
//}

void print(span<int> s)
{
	for (int i = 0; i < s.size(); ++i) {
		cout << s[i] << endl;
	}
	cout << endl;


}
int main()
{
	int a[10] = { 1,2,3,4,5,6,7,8,9,10 };

	print(a); // a의 값을 화면에 출력 

	

	cout << endl;
	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/SPAN.txt읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif

#define EIGHT_FIRST
#ifdef	EIGHT_FIRST

// ============================================ // 
// SPAN
// ============================================ //

#include <iostream>
#include <span>
#include <string>

#include <algorithm>
#include <vector>
#include <deque>		// 앞뒤에서 멤버를 추가하는 동작이 쉽다  
#include <list>
#include <queue>

#include <fstream>


/*
	vector -  136216567
	deque -   268435452
	list -	   85375361

*/
#include "../save.h"
#include "../String.h"

using namespace std;

extern bool 관찰;

//void print(int[]);
//void print(int a[])
//{
//	// a 가 몇개인지 알 수 없다. 
//	for (int i = 0; i < 20; ++i)
//		cout << a[i] << endl;
//	cout << endl;
//
//}

void print(span<char> s)
{
	for (auto p = s.rbegin(); p != s.rend(); ++p) {
		cout << *p;
	}
	cout << endl;

	//for (int i = 0; i < s.size(); ++i) {
	//	cout << s[i] << endl;
	//}
	//cout << endl;


}
int main()
{
	std::string s{ "Hello World" };
	print(s);

	cout << endl;
	MySaveFileCode::Save_File("8주차 자료/8주차_1.cpp", "8주차 자료/SPAN.txt읽기.txt");
	MySaveFileCode::Save_File_Auto(8, 1);
}

#endif
